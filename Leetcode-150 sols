1 - ques : Merge Sorted Array   
- sol  : class Solution {
         public:
        void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        // Append elements from numm2 to nums1
        for (int i = 0; i < n; i++) { 
            nums1[m + i] = nums2[i];
        }
        
        // Sort the combined array
        sort(nums1.begin(), nums1.end());
        }
     };



2- ques : Remove Element
- sol : class Solution {
         public:
         int removeElement(vector<int>& nums, int val) {
        int n = nums.size();
        int ans = 0;
        for(int i = 0; i < n; i++){
            if(nums[i] != val){
                nums[ans] = nums[i];
                ans++;
            }
        }
        return ans;
         }
       };


3- ques : Remove Duplicates from Sorted Array
- sol : class Solution {
        public:
        int removeDuplicates(vector<int>& nums) {
        if(nums.empty()) return 0;
        int i = 0;
        for(int j = 0; j < nums.size();j++){
            if(nums[i] != nums[j]){
                i++;
            }
            nums[i] = nums[j];
        }
        return i + 1;
       }
    };

4 - ques :Remove Duplicates from Sorted Array II
- sol : class Solution {
         public:
        int removeDuplicates(vector<int>& nums) {
        int n = nums.size();
        int i = 2;
        int j = 2;
        if( n < 3) return n;
        for(int j = 2; j < n;j++){
            if(nums[j] != nums[i - 1]){
                nums[i++] = nums[j];
            }
            else if(nums[j] != nums[i - 2]){
                nums[i++] = nums[j];
            }
        }
        return i;
       }
   };

5 - ques : Majority Element
- sol : class Solution {
        public:
        int majorityElement(vector<int>& nums) {
        int n = nums.size();
        int x = nums[0];
        int v = 1;
        for(int i =1 ; i < n; i++){
            if(nums[i] == x){
                v++;
            }
            else{
                v--;
                if(v == 0){
                    x = nums[i];
                    v++;
                }
            }
        }
        return x;
         }
       };

6 - ques : Rotate Array
- sol : class Solution {
        public:
        void reverse(vector<int>& nums,int s,int e){
        while(s < e){
            swap(nums[s++],nums[e--]);
        }
    }
    void rotate(vector<int>& nums, int k) {
        // edge case 
        k = k % nums.size();
        // revrese all
        reverse(nums,0,nums.size() - 1);
        // reverse k 
        reverse(nums,0,k - 1);
        // reverse remaining
        reverse(nums,k,nums.size() - 1);
    }
  };

7 - ques : Best Time to Buy and Sell Stock
- sol : class Solution {
         public:
         int maxProfit(vector<int>& prices) {
        int profit = 0;
        int buy = prices[0];
        int n = prices.size();
        for(int i= 1; i <n; i++){
            if(buy > prices[i]){
                buy = prices[i];
            }
            profit = max(profit,prices[i] - buy);
        }
        return profit;
    }
};


8 - ques : Best Time to Buy and Sell Stock II
sol - : class Solution {
     public:
    int maxProfit(vector<int>& prices) {
        int profit = 0;
        int n = prices.size();
        
        // Loop through the price list, check for each consecutive day.
        for (int i = 0; i < n - 1; i++) {
            // If the price of the next day is greater, add the difference to the profit.
            if (prices[i + 1] > prices[i]) {
                profit += prices[i + 1] - prices[i];
            }
        }
        
        return profit;
    }
};

9 - ques : Product of Array Except Self
sol - : class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
     int n = nums.size();
     vector< int> ans(n, 1); 

        //  Calculate prefix products
        int pre = 1;
        for (int i = 0; i < n; i++) {
            ans[i] = pre;
            pre *= nums[i];
        }

        // Calculate suffix products and multiply with the corresponding prefix product
        int suf = 1;
        for (int i = n - 1; i >= 0; i--) {
            ans[i] *= suf;
            suf *= nums[i];
        }

        return ans;
      }
    };

10 - ques : Maximum Depth of Binary Tree
sol : - class Solution {
public:
    int maxDepth(TreeNode* root) {
        // edge case 
        if(!root) return 0;
        int x = 1 + maxDepth(root -> left);
        int y = 1 + maxDepth(root -> right);
        return max(x,y);
       }
    };

11 - ques : Same Tree
sol : - class Solution {
public:
    bool isSameTree(TreeNode* r1, TreeNode* r2) {
        if(r1 == nullptr && r2 == nullptr) return 1;
        if(!r1 && r2 || r1 && !r2) return 0;
        if(r1 -> val != r2 -> val) return 0;
         return isSameTree(r1 -> left,r2 -> left) && isSameTree (r1 -> right, r2 -> right);
          }
     };

12 - ques : Count Complete Tree Nodes
sol : - class Solution {
public:
    int countNodes(TreeNode* root) {
        if(!root) return 0;
        return ( 1 + countNodes(root -> left) + countNodes(root -> right));
    }
};

13 - ques :  Jump Game
sol : -  class Solution {
          public:
          bool canJump(vector<int>& nums) {
        int n = nums.size();
        // create dp array
        vector<bool> dp(n,0);
        // handle 2 -3 base case 
        dp[0] = true;
        dp[1] = nums[0] != 0 ;0
        // fill dp array
â€¦       }
     };

14 - ques : jump Game II
sol :- class Solution {
       public:
      int jump(vector<int>& nums) {
         int n = nums.size();
        // create dp array
        vector<int> dp(n,INT_MAX);
        // handle 2 -3 base case 
        dp[0] = 0;
       if(n > 1) dp[1] = 1;
        // fill dp array
        for(int k = 2 ; k <n ; k++){
            for(int i = k - 1; i >= 0; i--){
                if(i + nums[i] >= k){
                    dp[k] = min(dp[k] ,dp[i] + 1);
                }
            }
        }
        // return last element;
        return dp[n - 1];
        }
   };


15 - ques : Roman to Integer
sol :- class Solution {
    public:
    int num(char c) {
        if (c == 'I')
            return 1;
        else if (c == 'V')
            return 5;
        else if (c == 'X')
            return 10;
        else if (c == 'L')
            return 50;
        else if (c == 'C')
            return 100;
        else if (c == 'D')
            return 500;
        else if (c == 'M')
            return 1000;
        else 
            return 0;
    }

       int romanToInt(string s) {
        int sum = 0;
        int index = 0;
        
        while (index < s.size() - 1) {
            if (num(s[index]) < num(s[index + 1])) {
                sum -= num(s[index]);
            } else {
                sum += num(s[index]);
            }
            index++;
        }
        
        // Add the value of the last character
        sum += num(s[s.size() - 1]);
        
        return sum;
    }
   };


16 : ques - Two Sum
sol : - class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int n = nums.size();
        map<int , int > mp;
        for (int i = 0 ; i < n ; i++)
        {
            int rem = target - nums[i] ;
            if(mp.find(rem) != mp.end())
            {
                return {mp[rem] , i} ;
            }
            mp[nums[i]] = i ;
        }
        return {};
    }
};


17 : - Find Peak Element
sol : - class Solution {
        public:
        int findPeakElement(vector<int>& nums) {
        int l=0,h=nums.size()-1;
        while(l<h) {
            int mid=l+(h-l)/2;
            if(nums[mid]<nums[mid+1])
                l=mid+1;
            else
                h=mid;
        }
        return l;
      }
  };


18 : -  Search Insert Position
sol : - class Solution {
       public:
     int searchInsert(vector<int>& nums, int target) {
        int s = 0, e = nums.size() - 1, mid;
        while(s <= e) {
            mid = s + (e - s) / 2;
            if (nums[mid] == target) {
                return mid;
                break ;
            } else if (nums[mid] < target) {
                s = mid + 1;
            } else {
                e = mid - 1;
            }
        }
         return s; 
     }
 };

19 : - ques : Linked List Cycle
sol : - class Solution {
        public:
        bool hasCycle(ListNode *head) {
        ListNode * curr = head;
        unordered_map<ListNode* ,bool> mp;
        while(curr != nullptr){
            if(mp[curr] == 1){
                return 1;
            }
             mp[curr] = 1;
             curr = curr -> next; 
        }
        return 0;
      }
 };

20 : - ques : Merge Two Sorted Lists
sol : - class Solution {
        public:
        ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode * dummy = new ListNode(0);
        ListNode * tail = dummy;
        while(list1 && list2){
            if(list1 -> val <= list2 -> val){
                tail -> next = list1;
                list1 =  list1 -> next;
            }
            else{
                tail -> next = list2;
                list2 = list2 -> next;
            }
            tail = tail -> next;
        }
        if(list1){
            tail -> next = list1;
        }
        else{
            tail -> next = list2;
        }
        ListNode * ans = dummy -> next;
        delete dummy;
        return ans;
    }
 };


21 : ques -Average of Levels in Binary Tree
   sol : - class Solution {
           public:
           vector<double> averageOfLevels(TreeNode* root) {
           vector<double> avg;
           queue<TreeNode *> q;
          q.push(root);
        while(!q.empty())
        {
            int s = q.size();
            double sum = 0;
            for(int i= 0; i< s; i++)
            {
                TreeNode * temp = q.front();
                q.pop();
                sum += temp -> val;
                if(temp -> left)
                q.push(temp -> left);
                if(temp -> right)
                q.push(temp -> right);
            }
            avg.push_back(sum / s);
        }
        return avg;
    }
};


22 : - ques : symmetric Tree
sol : - class Solution
{
public:
    bool isEqual(TreeNode *root1, TreeNode *root2)
    {
        if (root1 && root2) // if both nodes are not null
        {
            if (root1->val == root2->val) // If siblings are same
            {
                return isEqual(root1->left, root2->right) && isEqual(root1->right, root2->left); // step two recursion part
            }
            return false;
        }
        if (!root1 && !root2) // if both are null
            return true;
        return false; // if one is null but other is not null then return false
    }

    bool isSymmetric(TreeNode *root)
    {
        return isEqual(root->left, root->right);
    }
};


23 : - ques : palindrome number
sol : - class Solution {
        public:
        bool isPalindrome(int x) {
        // Negative numbers are not palindromes
        if (x < 0) {
            return false;
        }
        
        int revnum = 0;
        int dup = x; // Store the original value of x
        
        while (x > 0) {
            int ld = x % 10;
            
            // Check for overflow before updating revnum
            if (revnum > (INT_MAX - ld) / 10) {
                return false; // Overflow would occur
            }
            
            revnum = (revnum * 10) + ld;
            x = x / 10;
        }
        
        // Compare reversed number with the original value
        return dup == revnum;
    }
};


24 : - ques : plus one
sol : -  class Solution {
public:
    vector<int> plusOne(vector<int>& v) {
        int n = v.size();
        for(int i = n-1; i >= 0; i--){
            if(i == n-1)
                v[i]++;
            if(v[i] == 10){
                v[i] = 0;
                if(i != 0){
                    v[i-1]++;
                }
                else{
                    v.push_back(0);
                    v[i] = 1;
                }
            }
        }
        return v;
    }
};


25 : - ques  : Binary Tree Right Side View
Sol : - class Solution {
         public:
         vector<int> rightSideView(TreeNode* root) {
              // Your Code here
        vector<int> ans;
    
    if (!root) return ans;  // Return an empty vector if the root is null

    queue<TreeNode*> q;
    q.push(root);

    while (!q.empty()) {
        int n = q.size();
        
        // Add the leftmost node's data of the current level to ans
        ans.push_back(q.front()->val);

        // Traverse the current level
        for (int i = 0; i < n; i++) {
            TreeNode *temp = q.front();
            q.pop();

            // Push left child to the queue
            if (temp->right)
                q.push(temp->right);
            // Push right child to the queue
            if (temp->left)
                q.push(temp->left);
        }
    }

    return ans;
        
    }
};


26 : - Factorial Trailing Zeroes
sol : -  class Solution {
         public:
         int trailingZeroes(int n) {
        int c  = 0;
        while(n >= 5) {
            c += n / 5;
            n /= 5;
        }
        return c;
    }
};


27 : - Find Minimum in Rotated Sorted Array
sol : - class Solution {
        public:
       int findMin(vector<int>& nums) {
        int left = 0, right = nums.size() - 1;
        
        while (left < right) {
            int mid = left + (right - left) / 2;
            
            // If mid element is greater than the right element, min must be to the right of mid
            if (nums[mid] > nums[right]) {
                left = mid + 1;
            } else { // If mid element is less than or equal to the right element, min must be at mid or to the left of mid
                right = mid;
            }
        }
        
        // At the end of the loop, left == right and pointing to the smallest element
        return nums[left];
    }
};


28 : - ques : Valid Parentheses
sol : - class Solution {
        public:
        bool isValid(string s) {
        stack<char> st;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '(' || s[i] == '{' || s[i] == '[') {
                st.push(s[i]);
            } else {
                if (st.empty()) return false;
                char top = st.top();
                if ((s[i] == ')' && top == '(') ||
                    (s[i] == '}' && top == '{') ||
                    (s[i] == ']' && top == '[')) {
                    st.pop();
                } else {
                    return false;
                }
            }
        }
        return st.empty();
    }
};

29.) ques : Candy 
sol : - class Solution {
         public:
         int candy(vector<int>& ratings) {
        int n = ratings.size();
        // edge case 
        if(n == 1) return 1;
        
        vector<int> ans(n, 1); // Initialize with 1 candy for each child
        
        // left to right traverse
        for(int i = 1; i < n; i++) {
            if(ratings[i] > ratings[i - 1]) {
                ans[i] = ans[i - 1] + 1;
            }
        }
        
        // right to left traverse
        for(int i = n - 2; i >= 0; i--) {
            if(ratings[i] > ratings[i + 1]) {
                ans[i] = max(ans[i], ans[i + 1] + 1);
            }
        }
        
        // calculate total candies
        int candies = 0;
        for(int i = 0; i < n; i++) {
            candies += ans[i];
        }
        
        return candies;
    }
};


30) : - ques : Traping Rain water
sol : - class Solution {
public:
    int trap(vector<int>& height) {
        int n = height.size();
        if (n == 0) return 0;
        
        vector<int> left(n);
        vector<int> right(n);
        
        // Fill left array
        left[0] = height[0];
        for (int i = 1; i < n; i++) {
            left[i] = max(left[i - 1], height[i]);
        }
        
        // Fill right array
        right[n - 1] = height[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            right[i] = max(right[i + 1], height[i]);
        }
        
        // Calculate trapped water
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += min(left[i], right[i]) - height[i];
        }
        
        return ans;
    }
};


31 : - Ques : - Binary Tree Level Order Traversal
sol : -  class Solution {
         public:
        vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        if (!root) return ans;  // Handle edge case where root is null
        
        queue<TreeNode *> q;
        q.push(root);
        
        while (!q.empty()) {
            int n = q.size();
            vector<int> temp;
            for (int i = 0; i < n; i++) {
                TreeNode* node = q.front();
                q.pop();
                temp.push_back(node->val);
                
                if (node->left) 
                    q.push(node->left);
                if (node->right) 
                    q.push(node->right);
            }
            ans.push_back(temp);
        }
        return ans;
    }


32 : - ques  : - Validate Binary Search Tree
sol : - class Solution {
        public:
        void inorder(TreeNode* root,vector<int> &ans){
        if(!root) return;
        inorder(root -> left,ans);
        ans.push_back(root -> val);
        inorder(root -> right,ans);
     }
    bool isValidBST(TreeNode* root) {
        vector<int> ans;
        inorder(root,ans);
        for(int  i = 1; i < ans.size(); i++){
            if(ans[i] <= ans[i - 1])
            return 0;
        }
        return 1;
    }
};


33 : - ques : - Kth Smallest Element in a BST
sol : - class Solution {
    int inorder(TreeNode* root, int &k){
        if(!root) return -1;
        int left = inorder(root -> left,k);
        if(left != -1) return left;
        k--;
        if(k ==0) return root -> val;
        return inorder(root -> right,k);
    }
      public:
    int kthSmallest(TreeNode* root, int k) {
        return inorder(root,k);
    }
};


34 : - ques :- Integer to Roman
sol : - class Solution {
         public:
        string intToRoman(int num) {
        string ones[] = {"","I","II","III","IV","V","VI","VII","VIII","IX"};
        string tens[] = {"","X","XX","XXX","XL","L","LX","LXX","LXXX","XC"};
        string hrns[] = {"","C","CC","CCC","CD","D","DC","DCC","DCCC","CM"};
        string ths[]={"","M","MM","MMM"};
        
        return ths[num/1000] + hrns[(num%1000)/100] + tens[(num%100)/10] + ones[num%10];
    }
};

35 :- ques : - Length of Last Word
sol : - class Solution {
        public:
        int lengthOfLastWord(string s) {
        int len = 0;
        bool count = false;
        for(int i = s.length() - 1 ; i >= 0; i--){
            if(s[i] != ' '){
                count  = true;
                len++;
            }
            else if(count){
                break ;
            }
        }
        return len;
    }
};


36 :- Ques : - Longest Common Prefix
sol : - class Solution {
        public:
       string longestCommonPrefix(vector<string>& v) {
        string ans="";
        sort(v.begin(),v.end());
        int n=v.size();
        string first=v[0],last=v[n-1];
        for(int i=0;i<min(first.size(),last.size());i++){
            if(first[i]!=last[i]){
                return ans;
            }
            ans+=first[i];
        }
        return ans;
    }
};


37 : - Ques : - Roatate List
sol : - class Solution {
        public:
         ListNode* rotateRight(ListNode* head, int k) {
        // edge case
        if(head == nullptr) return  0;
        ListNode *temp = head;
        int n = 1;
        while(temp -> next){
            n++;
            temp = temp -> next;
        }
        k = k % n;
        temp -> next = head;
        temp = head;
        for(int i = 1; i < n - k; i++){
            temp = temp -> next;
        } 
        head = temp -> next;
        temp -> next = NULL;
        return head;
    }
};


38 : - Ques : - Remove Nth Node From End of List
sol : - class Solution {
        public:
        ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* dummy = new ListNode(0);
        dummy->next = head;
        ListNode* fast = dummy;
        ListNode* slow = dummy;
        
        // Move fast pointer n steps ahead
        for (int i = 0; i < n + 1; i++) {
            fast = fast->next;
        }
        
        // Move both pointers until fast reaches the end
        while (fast != nullptr) {
            fast = fast->next;
            slow = slow->next;
        }
        
        // Remove the nth node from the end
        ListNode* toDelete = slow->next;
        slow->next = slow->next->next;
        delete toDelete;
        
        // Get the new head
        ListNode* newHead = dummy->next;
        delete dummy;  // clean up the dummy node
        return newHead;
    }
};


39 : - Ques : - Sort List
Sol : - class Solution {
        public:
        ListNode* sortList(ListNode* head) {
        ListNode * ptr  = head;
        vector <int> st;
        while(ptr != nullptr)
        {
            st.push_back(ptr -> val) ;
            ptr =ptr -> next;
        }
        sort (st.begin(),st.end());
        ptr = head;
        int k = 0;
        while(ptr != nullptr)
        {
            ptr -> val = st[k++];
            ptr = ptr -> next;
        }
        return head;
    }
};


40 : - ques :- Sqrt(x)
Sol : - class Solution {
        public:
        int mySqrt(int x) {
       long long s = 1 , e = x , mid;
        long long ans ;
        while (s  <= e)
        {
            mid = s + (e -s) / 2;
            if(mid * mid == x)
            {
                ans = mid;
                break;
            }
            else if (mid * mid < x)
            {   
                ans = mid ;
                s = mid + 1 ;
            }
            else {
                e = mid - 1 ;
            }
        }   
        return ans;
    }
};


41 : - Ques :- Maximum Subarray
Sol :- class Solution {
        public:
        int maxSubArray(vector<int>& nums) {
        int sum = 0;
        int ans = INT_MIN;
        for(int i = 0; i<nums.size();i++){
            // sum negative ho to dobara sum shuru kro 
            if(sum < 0) sum = nums[i];
            else{   
                sum += nums[i];
            }
            ans = max(ans,sum);
        }
        return ans;
    }
};

42 : - Ques :- Longest Common Prefix
Sol :- class Solution {
       public:
      string longestCommonPrefix(vector<string>& v) {
        string ans="";
        sort(v.begin(),v.end());
        int n=v.size();
        string first=v[0],last=v[n-1];
        for(int i=0;i<min(first.size(),last.size());i++){
            if(first[i]!=last[i]){
                return ans;
            }
            ans+=first[i];
        }
        return ans;
    }
};


43 :- Ques :-  Binary Tree Zigzag Level Order Traversal
Sol :- class Solution {
       public:
       vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>>ans;
        vector<int>level;
        stack<TreeNode*>stk1; // left to right visit
        stack<TreeNode*>stk2; // right to left visit 

        if(!root)return ans;  // empty Binary Tree

        stk1.push(root);
        while(!stk1.empty() || !stk2.empty()){
            if(!stk1.empty()){ // stk1 is not empty => left to right access and during left to right visit store next level's nodes in stk2 so that we can access next level in right to left 
                while(!stk1.empty()){
                    TreeNode* node=stk1.top();
                    stk1.pop();
                    level.push_back(node->val);
                    if(node->left)stk2.push(node->left);  // push left child then right child so that in the next level we get it in right to left ( LIFO )
                    if(node->right)stk2.push(node->right);  
                }
            }
            else if(!stk2.empty()){  // right to left access and during right to left visit store next level's nodes in stk1 so that we can access next level in left to right 
                while(!stk2.empty()){
                    TreeNode* node=stk2.top();
                    stk2.pop();
                    level.push_back(node->val);
                    if(node->right)stk1.push(node->right);  // push right child then left child so that in the next level we get it in left to right (LIFO)
                    if(node->left)stk1.push(node->left);
                }
            }
            ans.push_back(level);
            level.erase(level.begin(),level.end());
        }
        return ans;
    }
};


44 :- Ques :- Binary Tree Maximum Path Sum
Sol:-  class Solution {
       public:
       int pathsum(TreeNode* root, int &sum) {
        // If the root doesn't exist, return 0
        if (!root) return 0;

        // Recursively calculate the max path sum for the left and right subtrees
        int left = max(0, pathsum(root->left, sum)); 
        int right = max(0, pathsum(root->right, sum));

        // Calculate the maximum path sum passing through the current node
        sum = max(sum, root->val + left + right);

        // Return the maximum path sum ending at this node
        return root->val + max(left, right);
    }

    int maxPathSum(TreeNode* root) {
        int sum = INT_MIN;  
        pathsum(root, sum); 
        return sum;  
    }
};


45 : Ques:- Flatten Binary Tree to Linked List
Sol :- class Solution {
       public:
      void flatten(TreeNode* root) {
        while(root)
        {
            // if left tree doesnt exist
            if(!root -> left)
            root = root -> right;
            else{
                // if left subtree exist
                TreeNode * curr = root -> left;
                while(curr -> right){
                    curr = curr -> right;
                }
                curr -> right = root -> right;
                root -> right = root -> left;
                root -> left = nullptr;
                root = root -> right;
            }
        }
    }
};


46 : Ques :- Median of Two Sorted Arrays
Sol :- class Solution {
       public:
       double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        vector<int> ans;
        for(int i = 0; i < nums1.size(); i++)
        {
            ans.push_back(nums1[i]);   
        }
        for(int i  = 0; i < nums2.size(); i++)
        {
            ans.push_back(nums2[i]);
        }
        
         sort(ans.begin(),ans.end());
         int s = 0;
         int e = ans.size() - 1;
         int m = (s + e ) / 2 ;
        if(ans.size() % 2 == 1) {
            return ans[m];
        }
        // even
        if(ans.size() % 2 ==0){
       float k = (ans[m] + ans[m + 1]) / 2.0;
       return k;
    }
    return 0;
    }
};

47 : Ques :- Construct Binary Tree from Inorder and Postorder Traversal
Sol :- class Solution {
       public:
    // Function to find the index of the target value in the inorder array
    int find(vector<int>& inorder, int target, int start, int end) {
        for (int i = start; i <= end; i++) {
            if (inorder[i] == target)
                return i;
        }
        return -1;
    }

    // Recursive function to build the tree
    TreeNode* Tree(vector<int>& inorder, vector<int>& postorder, int instart, int inend, int index) {
        if (instart > inend) return nullptr;

        
        TreeNode* root = new TreeNode(postorder[index]);

        // Find the position of the root in the inorder array
        int pos = find(inorder, postorder[index], instart, inend);

        //  right 
        root->right = Tree(inorder, postorder, pos + 1, inend, index - 1);

        //  left 
        root->left = Tree(inorder, postorder, instart, pos - 1, index - (inend - pos) - 1);

        return root;
    }

  
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int n = inorder.size();
        return Tree(inorder, postorder, 0, n - 1, n - 1);
    }
};

48 :- Ques :- Single Element in a Sorted Array
Sol :- class Solution {
        public:
        int singleNonDuplicate(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;
        unordered_map<int,int> mp;
        for(int i = 0; i < n; i++){
            mp[nums[i]]++;
        }
        for(auto it : mp){
            if(it.second == 1){
                ans = it.first;
                break;
            }
        }
        return ans;
    }
};


49 : Ques :- Longest Substring Without Repeating Characters
Sol :- class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        vector<bool> count(256, false); 
        int first = 0, second = 0, len = 0;
        
        while (second < s.size()) {
            while (count[s[second]]) {
                count[s[first]] = false;
                first++;
            }
            count[s[second]] = true;
            len = max(len, second - first + 1);
            second++;
        }
        
        return len;
    }
};

50 : Ques :- Contains Duplicate II
Sol : - class Solution {
        public:
        bool containsNearbyDuplicate(vector<int>& nums, int k) {
        unordered_map<int,int> mp;
        for(int i = 0 ; i < nums.size(); i++)
        {
            if(mp.find(nums[i]) != mp.end()) 
            {
                int dist = 0;
                int curr = i;
                int prev = mp[nums[i]];
              // find distance 
             dist = curr - prev;
              // if distance is lessnthan equal to k return true
             if(dist <= k)
             return 1;
            }
            mp[nums[i]] = i;
        }
        return false ;
    }
};

51 :- Ques : Minimum Absolute Difference in BST
Sol:- class Solution {
public:
        void solve(TreeNode* root, vector<int>& temp){
        if(root == NULL)
        return;
        solve(root->left, temp);
        temp.push_back(root->val);
        solve(root->right, temp);
    }
    int getMinimumDifference(TreeNode* root) {
        vector<int> ans;
        solve(root,ans);
        int mini = INT_MAX;
        for(int i = 0; i <ans.size() - 1 ;i++){
            int temp = ans[i + 1] - ans[i];
            mini = min(mini,temp);
        }
        return mini;
    }
};


52 :- Ques :Find First and Last Position of Element in Sorted Array
Sol :- class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int start = 0;
        int end = nums.size() - 1;
        int first = -1 , last = -1 ;
        int mid ;

        // Finding the first occurrence
        while(start <= end) {
            mid = start + (end - start) / 2;
            if(nums[mid] == target) {
                first = mid;
                end = mid - 1; // Keep searching in the left half
            } else if (nums[mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }

        start = 0;
        end = nums.size() - 1;

        // Finding the last occurrence
        while(start <= end) {
            mid = start + (end - start) / 2;
            if(nums[mid] == target) {
                last = mid;
                start = mid + 1; // Keep searching in the right half
            } else if (nums[mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }

        vector<int> ans(2);
        ans[0] = first;
        ans[1] = last;
        return ans;
    }
};

52 :- Ques :- Search in Rotated Sorted Array
Sol :- class Solution {
public:
    int search(vector<int>& nums, int target) {
        int ans = -1 ,s = 0 , e = nums.size() - 1 , mid ;
        while (s <= e)
        {   mid = s + ( e - s) / 2;
            if(nums[mid] == target) return mid;
            // left side me sorted hai
            else if (nums[mid] >= nums[0]){
            if(nums[s] <= target && nums[mid] >= target)
            e = mid - 1 ;
            else
            s = mid + 1 ;
            }
            else {
                // right side me sort hai
            if(nums[mid] <= target && nums[e] >= target)
            s = mid+1;
            else {
                e = mid - 1;
            }
            }
        }
    return -1;
    }
};

53 :- Ques :- Climbing Stairs
Sol :- class Solution {
    public:
    int climbStairs(int n) {
        if (n == 0 || n == 1) {
            return 1;
        }
        int prev = 1, curr = 1;
        for (int i = 2; i <= n; i++) {
            int temp = curr;
            curr = prev + curr;
            prev = temp;
        }
        return curr;
    }
};


54 :- Ques :- Ransom Note
Sol :- class Solution {
public:
    bool canConstruct(string ransomNote, string magazine) {
        unordered_map<char,int> mp;
        for(int i = 0; i <magazine.size();i++){
            mp[magazine[i]]++;
        }
        for(int i = 0; i <ransomNote.size();i++){
            mp[ransomNote[i]]--;
            if(mp[ransomNote[i]] < 0){
                return false;
            }
        }
        return true;
    }
};


55 : - Ques :- Min Stack
sol :- class MinStack {
    int minele=INT_MAX;
    stack<pair<int, int>> st;
public:
    MinStack() {

    }

    void push(int val) {
        if(!st.empty()) minele = min((st.top()).second, val);
        else minele = val;
        st.push({val,minele});
    }
    
    void pop() {
        st.pop();
        if(st.empty()) minele=INT_MAX;
    }
    
    int top() {
        return (st.top()).first;
    }
    
    int getMin() {
        if(st.empty()) return NULL;
        return (st.top()).second;
    }
};


56 :- Ques :- Reverse Linkedlist || 
Sol : - class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if(!head)   return NULL;
        if(!head->next) return head;

        ListNode *dummy = new ListNode(0);
        dummy->next = head;
        ListNode *prev = dummy;

        for(int i = 0; i < left - 1; i++)    prev = prev->next;
        ListNode *curr = prev->next;

        for(int i = 0; i < right - left; i++)
        {
            ListNode *forw = curr->next;
            curr->next = forw->next;
            forw->next = prev->next;
            prev->next = forw;
        }
        return dummy->next;

        
        
    }
};


57 : ques :- Find the Index of the First Occurrence in a String
Sol :- class Solution {
public:
    // Function to create the LPS (Longest Prefix which is also Suffix) array
    void computeLPSArray(string& needle, int n, vector<int>& lps) {
        int length = 0; 
        int i = 1;
        lps[0] = 0; /
        
        // Loop to fill the lps array
        while (i < n) {
            if (needle[i] == needle[length]) {
                length++;
                lps[i] = length;
                i++;
            } else {
                if (length != 0) {
                    length = lps[length - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
    }
    
    int strStr(string haystack, string needle) {
        int s = haystack.size();
        int n = needle.size();
        
        if (n == 0) return 0; // If needle is empty, return 0
        if (s < n) return -1; // If haystack is smaller than needle, return -1
        
        // Create LPS array for the needle
        vector<int> lps(n);
        computeLPSArray(needle, n, lps);
        
        int i = 0; // index for haystack
        int j = 0; // index for needle
        
        while (i < s) {
            if (haystack[i] == needle[j]) {
                i++;
                j++;
            }
            
            if (j == n) {
                return i - j; // Found needle in haystack
            } else if (i < s && haystack[i] != needle[j]) {
                if (j != 0) {
                    j = lps[j - 1];
                } else {
                    i++;
                }
            }
        }
        
        return -1; // Needle not found
    }
};
